name: Deploy Updated
run-name: Deploy Updated function ${{ github.event.inputs.function }} ${{ github.event.inputs.action }} by ${{ github.actor }} in ${{ github.event.inputs.environment }}

on:
    workflow_dispatch:
        inputs:
            # Implement resource deploy by bash script
            enable_resource_deploy:
                description: 'Enable for resource deploy'
                required: true
                type: boolean
                default: true

            action:
                description: 'Infra to deploy'
                required: true
                default: 'plan'
                type: choice
                options:
                    - 'plan'
                    - 'apply'
                    - 'destroy'

            environment:
                description: 'Environment to deploy'
                required: true
                default: 'dev'
                type: choice
                options:
                    - 'dev'
                    - 'sb'
                    - 'game'
                    - 'prd'

permissions:
    id-token: write
    contents: read

jobs:
    prepare-deploy-function:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install dependencies
              run: npm install --production

            - name: Build Lambda Layer
              run: |
                  mkdir -p nodejs
                  cp -r node_modules ./nodejs/
                  ls -la
                  zip -r layer.zip nodejs
                  du -csh layer.zip

            - name: Upload Lambda Layer Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: layer-zip
                  path: layer.zip

            - name: Compile TypeScript
              run: |
                  npm install tsx
                  npx tsc

            - name: Build and Zip Source Code
              run: |
                  ls -la
                  zip -r source.zip dist/

            - name: Upload Source Code Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: source-zip
                  path: source.zip

    deploy-base-resource:
        needs: prepare-deploy-function
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set AWS Account ID
              id: set-aws-account-id
              run: echo "::set-output name=aws_account_id::${{ github.event.inputs.environment == 'dev' && '340258365836' || github.event.inputs.environment == 'sb' && '309217545237' || github.event.inputs.environment == 'game' && '340258365836' || github.event.inputs.environment == 'prd' && '045372454064' }}"

            - name: Get Git Commit Hash
              id: get-commit-hash
              run: echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

            - name: Download Lambda Layer Artifact
              uses: actions/download-artifact@v3
              with:
                  name: layer-zip
                  path: .

            - name: Download Source Code Artifact
              uses: actions/download-artifact@v3
              with:
                  name: source-zip
                  path: .

            - name: Move zip to terraform folder
              run: |
                  COMMIT_HASH=${{ steps.get-commit-hash.outputs.commit_hash }}
                  mv layer.zip terraform/updated/layer-${COMMIT_HASH}.zip
                  mv source.zip terraform/updated/source-${COMMIT_HASH}.zip

            - name: Setup Terraform
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              uses: hashicorp/setup-terraform@v2
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: OIDC AWS Credentials
              uses: aws-actions/configure-aws-credentials@v3
              with:
                  aws-region: 'us-west-2'
                  role-to-assume: arn:aws:iam::${{ steps.set-aws-account-id.outputs.aws_account_id }}:role/oidc-github-actions-${{ github.event.inputs.environment }}-role
                  audience: sts.amazonaws.com

            - name: Terraform setup backend-config
              env:
                  WORKSPACE: 'minttown_pf_infra_crawler_${{ github.event.inputs.environment }}'
              run: |
                  FILEPATH="${GITHUB_WORKSPACE}/terraform/updated/terraform.tf"
                  sed -i "s/terraform_workspace_name_here/$WORKSPACE/g" "$FILEPATH"
                  echo "Replaced terraform_workspace_name_here with $WORKSPACE in $FILEPATH"

            - name: Terraform Init
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              working-directory: terraform/updated/
              run: terraform init

            - name: Terraform Validate
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              working-directory: terraform/updated/
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan or Apply
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' && github.event.inputs.action != 'destroy' }}
              env:
                  crawler_aws_account_id: '340258365836'
                  env: ${{ github.event.inputs.environment }}
              run: |
                  terraform ${{ github.event.inputs.action == 'plan' && 'plan' || 'apply -auto-approve' }} \
                    -var="crawler_aws_account_id=$crawler_aws_account_id" \
                    -var="env=$env" \
                    -var="commit_hash=${{ steps.get-commit-hash.outputs.commit_hash }}" \
                    -var="bucket_name=minttown-pf-crawler-data-bucket" \

              working-directory: terraform/updated/

            - name: Terraform Destroy
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' && github.event.inputs.action == 'destroy' }}
              env:
                  crawler_aws_account_id: '340258365836'
                  env: ${{ github.event.inputs.environment }}
              run: |
                  terraform destroy --auto-approve \
                    -var="crawler_aws_account_id=$crawler_aws_account_id" \
                    -var="env=${{ github.event.inputs.environment }}"
              working-directory: terraform/updated/

    # deploy-lambda-function:
    #     needs: [deploy-base-resource, prepare-deploy-function]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v3

    #         - name: Set up Cloud SDK with Auth
    #           uses: ./.github/actions/setup-aws-with-auth
    #           id: setup-aws-with-auth
    #           with:
    #               environment: ${{ github.event.inputs.environment }}

    #         - name: Download Lambda Layer Artifact
    #           uses: actions/download-artifact@v3
    #           with:
    #               name: layer-zip
    #               path: .

    #         - name: Download Source Code Artifact
    #           uses: actions/download-artifact@v3
    #           with:
    #               name: source-zip
    #               path: .

    #         - name: Create lambda layer version in each region
    #           env:
    #               AWS_REGION: us-east-2
    #           run: |
    #               LAYER_VERSION=$(aws lambda publish-layer-version \
    #                 --layer-name crawler_layer \
    #                 --description "Common dependencies for crawler functions" \
    #                 --zip-file fileb://layer.zip \
    #                 --compatible-runtimes nodejs20.x \
    #                 --region $AWS_REGION \
    #                 --query 'LayerVersionArn' \
    #                 --output text)
    #               echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

    # - name: Deploy Lambda Function
    #   env:
    #       ENVIRONMENT: ${{ github.event.inputs.environment }}
    #       AWS_REGION: us-east-2
    #   run: |
    #       if aws lambda get-function --function-name updated-function-$ENVIRONMENT --region $AWS_REGION; then
    #         echo "Function already exists in $AWS_REGION"
    #         aws lambda update-function-code \
    #           --function-name updated-function-$ENVIRONMENT \
    #           --zip-file fileb://source.zip \
    #           --region $AWS_REGION
    #       else
    #         echo "Function does not exist in $AWS_REGION"
    #         aws lambda create-function --region $AWS_REGION \
    #           --function-name updated-function-$ENVIRONMENT \
    #           --zip-file fileb://source.zip \
    #           --role arn:aws:iam::340258365836:role/crawler_function_role \
    #           --handler dist/updated_handler.handler \
    #           --runtime nodejs20.x \
    #           --timeout 30 \
    #           --layers $LAYER_VERSION \
    #           --environment Variables="{COUNTRY_CODE=$AWS_REGION,SNS_TOPIC_ARN=$SNS_TOPIC_ARN,S3_BUCKET=$S3_BUCKET_NAME,FREECASH_SESSION_ID=${{ secrets.FREECASH_SESSION_ID }}}"
    #         fi
