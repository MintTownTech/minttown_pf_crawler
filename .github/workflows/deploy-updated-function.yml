name: Deploy Updated Function
run-name: Deploy Updated function ${{ github.event.inputs.function }} ${{ github.event.inputs.action }} by ${{ github.actor }}

on:
    workflow_dispatch:
        inputs:
            # Implement resource deploy by bash script
            enable_resource_deploy:
                description: 'Enable for resource deploy'
                required: true
                type: boolean
                default: true

permissions:
    id-token: write
    contents: read

jobs:
    # deploy:
    # runs-on: ubuntu-latest
    # steps:
    #   - name: Checkout code
    #     uses: actions/checkout@v3

    # implement github action deploy lambda function
    # - name: Deploy Lambda Function
    #   uses: ./actions/crawler-terraform
    #   with:
    #     action: ${{ github.event.inputs.action }}
    #     account: dev

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #       role-to-assume:
    #           ${{ matrix.account == 'dev' && 'arn:aws:iam::340258365836:role/oidc-github-actions-dev-role' ||
    #           matrix.account == 'sb' && 'arn:aws:iam::309217545237:role/oidc-github-actions-sb-role' ||
    #           matrix.account == 'game' && 'arn:aws:iam::340258365836:role/oidc-github-actions-dev-role' ||
    #           matrix.account == 'prd' && 'arn:aws:iam::045372454064:role/oidc-github-actions-prd-role' }}
    #       aws-region: us-east-1

    # - name: Check if Lambda function exists
    #   id: check-lambda
    #   run: |
    #       aws lambda get-function --function-name ${{ matrix.account == 'dev' && 'updated_crawl_data_dev_function' ||
    #         matrix.account == 'sb' && 'updated_crawl_data_sb_function' ||
    #         matrix.account == 'game' && 'updated_crawl_data_game_function' ||
    #         matrix.account == 'prd' && 'updated_crawl_data_prd_function' }} || echo "Function does not exist"
    #   continue-on-error: true

    # - name: Deploy Lambda Function to each account
    #   uses: aws-actions/aws-lambda-deploy@v1
    #   with:
    #       function-name: ${{ matrix.account == 'dev' && 'updated_crawl_data_dev_function' ||
    #           matrix.account == 'sb' && 'updated_crawl_data_sb_function' ||
    #           matrix.account == 'game' && 'updated_crawl_data_game_function' ||
    #           matrix.account == 'prd' && 'updated_crawl_data_prd_function' }}
    #       zip-file: ./lambda_function.zip
    #       role: ${{ matrix.account == 'dev' && 'arn:aws:iam::340258365836:role/oidc-github-actions-dev-role' ||
    #           matrix.account == 'sb' && 'arn:aws:iam::309217545237:role/oidc-github-actions-sb-role' ||
    #           matrix.account == 'game' && 'arn:aws:iam::340258365836:role/oidc-github-actions-dev-role' ||
    #           matrix.account == 'prd' && 'arn:aws:iam::045372454064:role/oidc-github-actions-prd-role' }}

    prepare-deploy-function:
        needs: deploy-base-resource
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install dependencies
              run: npm install --production

            - name: Build Lambda Layer
              run: |
                  mkdir -p nodejs
                  cp -r node_modules ./nodejs/
                  ls -la
                  zip -r layer.zip nodejs
                  du -csh layer.zip

            - name: Upload Lambda Layer Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: layer-zip
                  path: layer.zip

            - name: Compile TypeScript
              run: |
                  npm install tsx
                  npx tsc

            - name: Build and Zip Source Code
              run: |
                  ls -la
                  zip -r source.zip dist/

            - name: Upload Source Code Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: source-zip
                  path: source.zip

    deploy-lambda-function:
        needs: [deploy-base-resource, prepare-deploy-function]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                aws_account: ['dev', 'sb', 'game']

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Cloud SDK with Auth
              uses: ./.github/actions/setup-aws-with-auth
              id: setup-aws-with-auth
              with:
                  environment: ${{ matrix.aws_account }}

            - name: Create lambda layer version in each region
              env:
                  AWS_REGION: us-east-2
              run: |
                  LAYER_VERSION=$(aws lambda publish-layer-version \
                    --layer-name crawler_layer \
                    --description "Common dependencies for crawler functions" \
                    --zip-file fileb://layer.zip \
                    --compatible-runtimes nodejs20.x \
                    --region $AWS_REGION \
                    --query 'LayerVersionArn' \
                    --output text)
                  echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

            - name: Deploy Lambda Function
              env:
                  ACCOUNT: ${{ matrix.aws_account }}
                  AWS_REGION: us-east-2
              run: |
                  if aws lambda get-function --function-name updated-function-$ACCOUNT --region $AWS_REGION; then
                    echo "Function already exists in $AWS_REGION"
                    aws lambda update-function-code \
                      --function-name updated-function-$ACCOUNT \
                      --zip-file fileb://source.zip \
                      --region $AWS_REGION
                  else
                    echo "Function does not exist in $AWS_REGION"
                    aws lambda create-function --region $AWS_REGION \
                      --function-name updated-function-$ACCOUNT \
                      --zip-file fileb://source.zip \
                      --role arn:aws:iam::340258365836:role/crawler_function_role \
                      --handler dist/updated_handler.handler \
                      --runtime nodejs20.x \
                      --timeout 30 \
                      --layers $LAYER_VERSION \
                      --environment Variables="{COUNTRY_CODE=$AWS_REGION,SNS_TOPIC_ARN=$SNS_TOPIC_ARN,S3_BUCKET=$S3_BUCKET_NAME,FREECASH_SESSION_ID=${{ secrets.FREECASH_SESSION_ID }}}"
                    fi
