name: Deploy Crawler
run-name: Deploy Resource ${{ github.event.inputs.function }} ${{ github.event.inputs.action }} by ${{ github.actor }}

on:
    workflow_dispatch:
        inputs:
            enable_resource_deploy:
                description: 'Enable for resource deploy'
                required: true
                type: boolean
                default: true

            action:
                description: 'Infra to deploy'
                required: true
                default: 'plan'
                type: choice
                options:
                    - 'plan'
                    - 'apply'

permissions:
    id-token: write
    contents: read

jobs:
    deploy-base-resource:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Terraform
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              uses: hashicorp/setup-terraform@v2
              with:
                  cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

            - name: Set up Cloud SDK with Auth
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              uses: ./.github/actions/setup-auth-aws
              id: setup-aws-with-auth

            - name: Terraform setup backend-config
              env:
                  WORKSPACE: 'minttown_pf_infra_crawler'
              run: |
                  FILEPATH="./terraform/crawler/terraform.tf"
                  sed -i "s/terraform_workspace_name_here/$WORKSPACE/g" "$FILEPATH"
                  echo "Replaced terraform_workspace_name_here with $WORKSPACE in $FILEPATH"

            - name: Terraform Init
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              working-directory: terraform/crawler/
              run: terraform init

            - name: Terraform Validate
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              working-directory: terraform/crawler/
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan or Apply
              if: ${{ github.event.inputs.enable_resource_deploy == 'true' }}
              env:
                  FREECASH_SESSION_ID: ${{ secrets.FREECASH_SESSION_ID }}
              run: terraform ${{ github.event.inputs.action == 'plan' && 'plan' || 'apply -auto-approve' }} -var="freecash_session_id=${{ secrets.FREECASH_SESSION_ID }}"
              working-directory: terraform/crawler/

    # TODO: use lambda layer for forward object to another regions
    prepare-deploy-function:
        needs: deploy-base-resource
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install dependencies
              run: npm install --production

            - name: Build Lambda Layer
              run: |
                  mkdir -p nodejs
                  cp -r node_modules ./nodejs/
                  ls -la
                  zip -r layer.zip nodejs
                  du -csh layer.zip

            - name: Upload Lambda Layer Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: layer-zip
                  path: layer.zip

            - name: Compile TypeScript
              run: |
                  npm install tsx
                  npx tsc

            - name: Build and Zip Source Code
              run: |
                  ls -la
                  zip -r source.zip dist/

            - name: Upload Source Code Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: source-zip
                  path: source.zip

    deploy-lambda-function:
        needs: [deploy-base-resource, prepare-deploy-function]
        runs-on: ubuntu-latest
        strategy:
            matrix:
                region: ['us-east-1', 'us-west-2', 'eu-west-1', 'ap-southeast-1']
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Cloud SDK with Auth
              uses: ./.github/actions/setup-auth-aws
              id: setup-aws-with-auth

            - name: Download Lambda Layer Artifact
              uses: actions/download-artifact@v3
              with:
                  name: layer-zip
                  path: .

            - name: Download Source Code Artifact
              uses: actions/download-artifact@v3
              with:
                  name: source-zip
                  path: .

            - name: Create lambda layer version in each region
              env:
                  AWS_REGION: ${{ matrix.region }}
              run: |
                  LAYER_VERSION=$(aws lambda publish-layer-version \
                    --layer-name crawler_layer \
                    --description "Common dependencies for crawler functions" \
                    --zip-file fileb://layer.zip \
                    --compatible-runtimes nodejs20.x \
                    --region $AWS_REGION \
                    --query 'LayerVersionArn' \
                    --output text)
                  echo "LAYER_VERSION=$LAYER_VERSION" >> $GITHUB_ENV

            - name: Deploy Lambda Function
              env:
                  AWS_REGION: ${{ matrix.region }}
                  S3_BUCKET_NAME: minttown-pf-crawler-data-bucket-test
                  SNS_TOPIC_ARN: arn:aws:sns:us-west-2:340258365836:crawler-cross-account-notification
                  LAMBDA_FUNCTION_ROLE_ARN: arn:aws:iam::340258365836:role/crawler_function_role
                  LAYER_VERSION: ${{ env.LAYER_VERSION }}

              run: |
                  if aws lambda get-function --function-name lambda_crawler_function --region $AWS_REGION; then
                    echo "Function already exists in $AWS_REGION"
                    aws lambda update-function-code \
                      --function-name lambda_crawler_function \
                      --zip-file fileb://source.zip \
                      --region $AWS_REGION
                  else
                    echo "Function does not exist in $AWS_REGION"
                    aws lambda create-function --region $AWS_REGION \
                      --function-name lambda_crawler_function \
                      --zip-file fileb://source.zip \
                      --role arn:aws:iam::340258365836:role/crawler_function_role \
                      --handler dist/lambda_handler.handler \
                      --runtime nodejs20.x \
                      --timeout 30 \
                      --layers $LAYER_VERSION \
                      --environment Variables="{COUNTRY_CODE=$AWS_REGION,SNS_TOPIC_ARN=$SNS_TOPIC_ARN,S3_BUCKET=$S3_BUCKET_NAME,FREECASH_SESSION_ID=${{ secrets.FREECASH_SESSION_ID }}}"
                    fi
